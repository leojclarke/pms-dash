{"remainingRequest":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/source-map-loader/index.js!/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/src/serviceWorker.js","dependencies":[{"path":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/src/serviceWorker.js","mtime":499162500000},{"path":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/node_modules/source-map-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/leojclarke/neuefische/2019-q2/_digitales-gesellenstück/app/pms-dash/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]}]}